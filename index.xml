<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SAP on Microsoft on SAP on Microsoft - Tutorials</title><link>/</link><description>Recent content in SAP on Microsoft on SAP on Microsoft - Tutorials</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 08 Mar 2022 16:31:36 -0300</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Environment Preparation</title><link>/labs/dataai/datafactory/step1/</link><pubDate>Fri, 25 Mar 2022 10:32:20 -0300</pubDate><guid>/labs/dataai/datafactory/step1/</guid><description>Before we start extracting data from SAP, we need to create a repository to hold the extracted data.
In this example we will be using Azure Data Factory to extract the data and store it in a Blob Storage of a Datalake.
This section will show the steps required to prepare the environment for that:
Log on to the Azure Portal and look for Storage Accounts Create a new Storage Account and provide the required information.</description></item><item><title>Setting up Azure Monitor for SAP</title><link>/labs/inframgmt/monitoring/step1/</link><pubDate>Mon, 14 Mar 2022 14:22:13 -0300</pubDate><guid>/labs/inframgmt/monitoring/step1/</guid><description>In order to have SAP monitoring, we need to spin up an instance of Azure Monitoring.
This section will show the steps required for that to be accomplished:
Log on to the Azure Portal and look for Azure Monitor for SAP Create a new instance and provide the required information. Select the same region, vNet and subnet as SAP was deployed: Region: East US vNET: SAPCALDefault-eastus Subnet: default Do not worry about defining providers at this moment.</description></item><item><title>Setting up SAP</title><link>/labs/security/adsso/step1/</link><pubDate>Mon, 14 Mar 2022 14:22:13 -0300</pubDate><guid>/labs/security/adsso/step1/</guid><description>Before we start integrating SAP with Azure Active Directory for SSO, we need to setup SAP to allow this communication to happen.
This section will show the steps required for this to be accomplished:
SAP Profile selection Log on to the SAP BAstion host via Remote Desktop and look for open SAP GUI (SAP Logon) with user BPINST/Welcome1 Go to TCODE RZ10 We will change some parameters from the default SAP profile.</description></item><item><title>Creating our Chatbot</title><link>/labs/autoint/virtualagents/step1/</link><pubDate>Thu, 10 Mar 2022 17:25:38 -0300</pubDate><guid>/labs/autoint/virtualagents/step1/</guid><description>In this section we will create our Chatbot on Microsoft Power Platform.
Go to Office 365, authenticate and select Power Apps. On Power Apps, expand Chatbots, select Create and click on the Basic conversational bot button. Fill the information to create the bot:
Name: SAP Bot Language: Deisred language (examples in Brazilian Portuguese with translation) Environment: US Once the bot is created, go to Topics and click on New Topic Let&amp;rsquo;s rename the newly created topic from Untitled to PO Details (en-US) / Detalhes do Pedido (pt-BR) The bot needs know which phrases trigger this topic, so we will add some examples of questions users may pose to accomplish what they need:</description></item><item><title>Create a Logic App</title><link>/labs/autoint/logicapps/step1/</link><pubDate>Thu, 10 Mar 2022 14:52:21 -0300</pubDate><guid>/labs/autoint/logicapps/step1/</guid><description>In this step we will create a Logic App on Azure Portal.
Go to Logic Apps Click on Add Fill the required parameters as the picture below Subscription and Resource Group Name: SAPDemo Region: East US (same one used on the previous steps) Plan type: Consumption</description></item><item><title>Remote Desktop Setup</title><link>/env_setup/datagwsetup/step1/</link><pubDate>Wed, 09 Mar 2022 11:22:24 -0300</pubDate><guid>/env_setup/datagwsetup/step1/</guid><description>In this section we will install the required components for Azure and Microsoft be able to connect to your SAP environment.
This section is a summary of the guide Install data gateway and Connect to SAP systems.
Connect to the Remote Desktop as on the previous step and using a browser on the Bastion Host, download 3 pieces of software (links might have changed, please check above guides for the most up-to-date links):</description></item><item><title>HANA Provider</title><link>/labs/dataai/datafactory/step2/</link><pubDate>Fri, 25 Mar 2022 10:32:20 -0300</pubDate><guid>/labs/dataai/datafactory/step2/</guid><description>Let&amp;rsquo;s create a new pipeline and extract data to the Blob Storage:
On the Data Factory Studio, click on the Pencil icon on the left, click the Dataset Ellipsis and select New Dataset For the datastore, we will search for SAP and select SAP HANA: For the properties: Name: SapHanaTable1 Create a New under Linked Service Fill the required data for the linked service: Name: SapHana1 Integration Runtime: SAPIntegrationRuntime Server Name: &amp;laquo;HANA IP&amp;raquo;:30215 Authentication Type: Basic User name: SAPHANADB Password: Password defined on the CAL setup phase Click on Test connection and if successful, click on Apply Select the newly created SapHana1 linked service and click OK (we will not be selecting a table right now) We are now communicating with SAP HANA.</description></item><item><title>Setup Azure Automation for SAP</title><link>/labs/inframgmt/azureautomation/step1/</link><pubDate>Tue, 15 Mar 2022 15:55:06 -0300</pubDate><guid>/labs/inframgmt/azureautomation/step1/</guid><description>In order to have Azure Automation gracefully managing SAP Worklaods, we need to setup the Azure Automate and import some runbooks.
This section will show the steps required for that to be accomplished:
Azure Automation Setup Log on to the Azure Portal and go to Automation Accounts Create an Automation Account with the following parameters: Resource Group: Pick the SAPCAL-XXXXXXXX created by SAP CAL so we can cleanup properly. Account Name: SAPAutomationAcc Region: East US (same as SAP) Click Review and Create and then in Create Go to the newly create SAPAutomationAcc Importing Modules Let&amp;rsquo;s add a Module to run PowerShell commands with SAP.</description></item><item><title>Setup Azure Backup</title><link>/labs/inframgmt/backup/step1/</link><pubDate>Tue, 15 Mar 2022 15:55:06 -0300</pubDate><guid>/labs/inframgmt/backup/step1/</guid><description>In order to have Azure Backup backing up SAP HANA databases, we need to setup the Azure Backup as well as the HANA Database Server.
This section will show the steps required for that to be accomplished:
SAP HANA Setup We need to connect to the SAP HANA Server and run a script that will prepare the database for Azure Backup.
Log on to the Azure Portal and open a Cloud Shell (BASH) We need to SSH to the server, using the SAP provided certificate key (can be downloaded from SAP CAL again), previously uploaded to the CloudShell and having permission as 400).</description></item><item><title>HANA Provider</title><link>/labs/inframgmt/monitoring/step2/</link><pubDate>Mon, 14 Mar 2022 14:22:13 -0300</pubDate><guid>/labs/inframgmt/monitoring/step2/</guid><description>Let&amp;rsquo;s add a HANA Provider to collect metrics for us:
On the Azure Monitor for SAP, go to Providers Click Add Let&amp;rsquo;s fill the required data: Type: SAP HANA IP Address: SAP HANA Private IP Address Database tenant: SYSTEMDB SQL Port: 30215 Username: SAPHANADB Password: Password defined during deploy of SAP CAL Wait for the Provider to be created and the data validated. It takes about 10-15 minutes for information to be initially available on Azure Monitor.</description></item><item><title>Linux Provider</title><link>/labs/inframgmt/monitoring/step3/</link><pubDate>Mon, 14 Mar 2022 14:22:13 -0300</pubDate><guid>/labs/inframgmt/monitoring/step3/</guid><description>Let&amp;rsquo;s add a HANA Provider to collect metrics for us:
Node Exporter Agent Before we start, we need to add an agent to the monitored VM.
Go to the Azure Portal and open a Cloud Shell. In the examples we used BASH as the interpreter. Now we will upload the key that SAP CAL generated on the deployment so we can log on to the Linux OS. Click on the File Transfer icon and then Upload Select the key which will be a *.</description></item><item><title>Setup Azure AD, Fiori &amp; SSO</title><link>/labs/security/adsso/step2/</link><pubDate>Mon, 14 Mar 2022 14:22:13 -0300</pubDate><guid>/labs/security/adsso/step2/</guid><description>Now we will start to configure Azure Active Directory to be a provider for SAP. This will be a back and forth process where we configure AD, go to SAP to configure it, and return to finish AD configuration.
Go to Azure Portal and select Azure Active Directory Setting Up Active Directory In case you don&amp;rsquo;t have an AD configured already on your subscription, keep going. To use existing AD, jump to step #6.</description></item><item><title>Testing our Chatbot</title><link>/labs/autoint/virtualagents/step2/</link><pubDate>Thu, 10 Mar 2022 17:25:38 -0300</pubDate><guid>/labs/autoint/virtualagents/step2/</guid><description>In this section we will test and debug our Chatbot on Microsoft Power Platform.
On the left side of the screen go to the Test bot and simulate a user conversation.
IMPORTANT: SAP expects a 10 char stirng with leading zeroes, so if you want to check order 728 you need to type 0000000728 Once we are doing a lab, we are not treating the input so type just the PO number with no other information, leading/trailing spaces, words, once we are passing the whole input to SAP.</description></item><item><title>Create a Workflow</title><link>/labs/autoint/logicapps/step2/</link><pubDate>Thu, 10 Mar 2022 14:52:21 -0300</pubDate><guid>/labs/autoint/logicapps/step2/</guid><description>In this step we will create the Workflow on Azure Portal.
Go to Logic Apps Click on your Logic App SAPDemo Go to Workflows and Add a new one as the parameters below: Click on Designer and let&amp;rsquo;s start building the Workflow! As the first operation, which starts the flow, we will pick When a HTTP request is received In order to customize the payload we expect, let&amp;rsquo;s Use a sample payload to generate schema Sample payload: {&amp;quot;id&amp;quot;: &amp;quot;0000000728&amp;quot;} This will generate a schema for the trigger Now we will create our temp variable to hold the desired part of the SAP reponse.</description></item><item><title>Azure Data Gateway Setup</title><link>/env_setup/datagwsetup/step2/</link><pubDate>Wed, 09 Mar 2022 11:22:24 -0300</pubDate><guid>/env_setup/datagwsetup/step2/</guid><description>In this section we will create the endpoint on Azure for the installed on-premises data gateway.
This section is a summary of the guide Install data gateway and Connect to SAP systems.
Connect to the Azure Portal and follow the steps below:
Go to On-premises Data Gateways: Select Add Fill the required parameters. Make sure to Select the same region as used on the installation (East US) and Select the name of the gateway previously created that should be populated on the drop-down box.</description></item><item><title>SAP TABLE Provider</title><link>/labs/dataai/datafactory/step3/</link><pubDate>Fri, 25 Mar 2022 10:32:20 -0300</pubDate><guid>/labs/dataai/datafactory/step3/</guid><description>Let&amp;rsquo;s create a new pipeline and extract data to the Blob Storage:
On the Data Factory Studio, click on the Pencil icon on the left, click the Dataset Ellipsis and select New Dataset For the datastore, we will search for SAP and select SAP Table: For the properties: Name: SapTable1 Create a New under Linked Service Fill the required data for the linked service: Name: SapTable1 Integration Runtime: SAPIntegrationRuntime Server Name: &amp;laquo;HANA IP&amp;raquo; System Number: 00 Client Id: 100 Username: BPINST Password: Welcome1 Click on Test connection and if successful, click on Apply Select the newly created SapTable1 linked service, select Table MATDOC and click OK We are now communicating with SAP via Netweaver.</description></item><item><title>Run a Backup</title><link>/labs/inframgmt/backup/step2/</link><pubDate>Tue, 15 Mar 2022 15:55:06 -0300</pubDate><guid>/labs/inframgmt/backup/step2/</guid><description>With Azure Backups configured and communicating with SAP HANA database, let&amp;rsquo;s execute a manual backup to test it.
This section will show the steps required for that to be accomplished:
Log on to the Azure Portal and click on Backup items and then SAP HANA in Azure VM You should see a screen similar to this, with a Warning (initial backup pending) message. Right+Click the elipsis and select Backup Now for both HDB and SYSTEMDB.</description></item><item><title>Setup VM Tags</title><link>/labs/inframgmt/azureautomation/step2/</link><pubDate>Tue, 15 Mar 2022 15:55:06 -0300</pubDate><guid>/labs/inframgmt/azureautomation/step2/</guid><description>In order for Azure Automation to be able to identify the correct VMs that need to be started or stopped, we need to add a few Tags to them. This example is aimed at a simple scenario like the one deployed by SAP CAL or a DEV environment. Please see the complete documentation for more information.
This section will show the steps required for that to be accomplished:
Adding Tags Log on to the Azure Portal, go to Virtual Machines and select the HANA VM (XXXX-SAP1) Click on Tags on the left pane and add the following: SAPApplicationInstanceNumber: 1 SAPApplicationInstanceType: SAP_ASCS SAPDBMSType: HANA SAPHANAInstanceNumber: 02 SAPHANASID: HDB SAPSystemSID: S4H Click Apply Go back to the Virtual Machines page and select the App server VM (XXX-SAP2) Click on Tags on the left pane and add the following: SAPApplicationInstanceNumber: 1 SAPApplicationInstanceType: SAP_J SAPSystemSID: S4H Click Apply Congratulations, you have finished configuring the VMs with tags so that Azure Automation can correctly coordinate the operations to start/stop SAP.</description></item><item><title>Publishing to Teams</title><link>/labs/autoint/virtualagents/step3/</link><pubDate>Thu, 10 Mar 2022 17:25:38 -0300</pubDate><guid>/labs/autoint/virtualagents/step3/</guid><description>In this section we will publish our Chatbot to Teams and test it.
On the left side of the screen go to the Publish Publish the latest version. Once the bot is public, we will add it to our org&amp;rsquo;s Teams. Click on Go to Channels and then turn on Teams Channel After the publishing and channel activations succeeds, you should see the option to Open bot directly on Teams. On Teams, Add the Bot Run the same simulations as in the test bot.</description></item><item><title>Running the lab</title><link>/labs/autoint/logicapps/step3/</link><pubDate>Thu, 10 Mar 2022 14:52:21 -0300</pubDate><guid>/labs/autoint/logicapps/step3/</guid><description>In this step we will execute the Workflow created previously
Go back to Overview, Enable Debug mode (will be used in the future) and copy the Workflow URL provided We need to invoke the API, so we can use an externall tool like Postman or use the embeded Run Trigger tool.
For Postman:
Method: POST URL: copied on the previous step Body: raw - JSON Body content: {&amp;quot;id&amp;quot;: &amp;quot;0000000728&amp;quot;} or {&amp;quot;id&amp;quot;: &amp;quot;0000001575&amp;quot;} Note: SAP compares strings so have that in mind with leading zeroes and 10 total chars Hit Send.</description></item><item><title>HANA Demo DB Setup</title><link>/labs/autoint/powerbi/step1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/autoint/powerbi/step1/</guid><description>Before we start generating insights from SAP HANA, we need to import a demo content provided by SAP called SHINE. In this step we will import the package, run the demo app and populate the database with demo data. We will also install Power BI Desktop app so we can start working with the SAP data in the next sections.
Loading Sample data model (SHINE) The steps required are:
Go to the Bastion host.</description></item><item><title>IoT Hub Setup</title><link>/labs/iot/iot/step1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/iot/iot/step1/</guid><description>Before we start sending data to SAP, we need to create an IoT Hub to receive the ioT telemetry data and process it as it arrives.
This section will show the steps required to prepare the environment for that:
Setting up Azure IoT Hub Log on to the Azure Portal and look for Iot Hub On IoT Hub page, select Create Provide the required information. Select the same region that SAP was deployed: Resource Group: IotRG (create new RG) IoT Hub Name: SAPIOTLAB (must be unique on Azure) Region: East US Click: Next: Networking&amp;gt; Make sure we have Public Access setup so we can send data via internet.</description></item><item><title>SAP Custom Connector</title><link>/labs/autoint/office365flow/step1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/autoint/office365flow/step1/</guid><description>This is the same step performed on the Powerapps lab. In case you already created an SAP Custom Connector, you can skip to section #2 of the lab, otherwise, create the connector as per instructions below
In this step we will create a custom connector to SAP on Power Apps. Custom connectors are used when you have a specific data source for which you know how to handle the requests.</description></item><item><title>SAP Custom Connector</title><link>/labs/autoint/powerapps/step1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/autoint/powerapps/step1/</guid><description>In this step we will create a custom connector to SAP on Power Apps. Custom connectors are used when you have a specific data source for which you know how to handle the requests. In this example we will use a premade example for the SAP Gateway Demo System (configured on the setup phase, section 4 - in case you skipped this step, please stop and create your access to the SAP Gateway Demo).</description></item><item><title>Run a Restore</title><link>/labs/inframgmt/backup/step3/</link><pubDate>Tue, 15 Mar 2022 15:55:06 -0300</pubDate><guid>/labs/inframgmt/backup/step3/</guid><description>Let&amp;rsquo;s change some data and then run a restore for a point-in-time previous to the change.
This section will show the steps required for that to be accomplished:
Changing some data Go to the Bastion Host, and open the SAP GUI. Login with BPINST/Welcome1 default user. On SAP GUI, go to TCODE MM02 to change a material. For Material we will choose the CM-FL-V00 a Forklift. Click on the Checkmark. For Plant we will choose the 1710 a Forklift.</description></item><item><title>Starting SAP</title><link>/labs/inframgmt/azureautomation/step3/</link><pubDate>Tue, 15 Mar 2022 15:55:06 -0300</pubDate><guid>/labs/inframgmt/azureautomation/step3/</guid><description>This assumes that your SAP envinronment is deployed but suspended, with VMs in Stopped state.
In case your SAP is running, go to SAP CAL and suspend the environment so we can start it with the runbook.
With Azure Automation configured and the VMs tagged, we can execute the main runbook to start SAP
This section will show the steps required for that to be accomplished:
Executing the Start-SAPSystem Runbook Go to the Azure Automation Account SAPAutomationAcc and select Runbooks on the left panel.</description></item><item><title>Create Power App</title><link>/labs/autoint/powerapps/step2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/autoint/powerapps/step2/</guid><description>In this step we will create a an App from scratch and consume data from SAP APIs via the Custom Conenctor from step #1.
The steps required are:
Go to Office.com. Click on the 9 dots Icon on the Top Left Select Power Apps (it can also be found under All Apps) In Power Apps, click on Create and select Black app Select Blank Canvas App Name it SAPDemoApp and select Tablet format.</description></item><item><title>From HANA Objects</title><link>/labs/autoint/powerbi/step2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/autoint/powerbi/step2/</guid><description>In this step we will read data from SAP HANA published objects from the SHINE package imported on the #1.
The steps required are:
Datasource setup Open Power BI desktop, open a new Report. Click on the Get Data and select More Select Database and pick SAP HANA database. Click Connect On the connection parameters set: Server = vhcals4hcs.dummy.nodomain Port = Custom and 30215 Data connectivity = DirectQuery Click OK On the SAP HANA credentials set, click on the Database on the left panel and set: Username = SAPHANADB Password = The one set during SAP CAL deployment Uncheck Validate Server Certificate Click Connect We are ready to select the datasource.</description></item><item><title>Preparing OneDrive</title><link>/labs/autoint/office365flow/step2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/autoint/office365flow/step2/</guid><description>In this step we will setup an One Drive folder to run our lab.
The steps required are:
Go to Office.com. Click on the 9 dots Icon on the Top Left Select One Drive (it can also be found under All Apps) Under My Files. Select New and pick the Folder option. Name: Excel2SAP Download the sample spreadsheet. This is the product list we will automatically create into SAP. Open it and change the yellow cells following the template provided: Category: Pick from the dropdown Name: *XXX-9999 Price: 0000-9999 The other fields are automated with formulas, so no need to change them.</description></item><item><title>Extracting data</title><link>/labs/dataai/datafactory/step4/</link><pubDate>Fri, 25 Mar 2022 10:32:20 -0300</pubDate><guid>/labs/dataai/datafactory/step4/</guid><description>Let&amp;rsquo;s add some steps on our pipeline to extract data to the Blob Storage:
On the Data Factory Studio, click on the adfsap_pipeline on the left, open the Move &amp;amp; Transform activity, and drag Copy data to the main panel: For the Copy data activity, we will name it Hana2Blob, under General tab: On the Source tab we will select the dataset we want to read data from. In this example the HANA one, but it could be the SAP Table one as well.</description></item><item><title>Stopping SAP</title><link>/labs/inframgmt/azureautomation/step4/</link><pubDate>Tue, 15 Mar 2022 15:55:06 -0300</pubDate><guid>/labs/inframgmt/azureautomation/step4/</guid><description>This assumes that your SAP envinronment is deployed and running, with VMs in Running state.
In case your SAP is stopped check the previous step (#3) on this section so you can start it or start it using SAP CAL.
With Azure Automation configured and the VMs tagged, we can execute the main runbook to stop SAP
This section will show the steps required for that to be accomplished:</description></item><item><title>Testing SSO</title><link>/labs/security/adsso/step3/</link><pubDate>Mon, 14 Mar 2022 14:22:13 -0300</pubDate><guid>/labs/security/adsso/step3/</guid><description>Now that the configuration steps are done, we are ready to test the SSO in action.
All the operations will be done on the Bastion Host once, even with internet access, name resolution and security certificates are generated using the internal network names by SAP CAL.
From the Bastion Host, open an internet browser window and navigate to https://vhcals4hcs.dummy.nodomain:44301/sap/bc/ui2/flp. Confirm that it no longer asks for User and password, instead offering a choice of identity provider, in this case ADSAPDEMO as we specified on Azure AD.</description></item><item><title>Building the Flow</title><link>/labs/autoint/office365flow/step3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/autoint/office365flow/step3/</guid><description>In this step we will create the automation required to create products automatically on SAP via ODATA.
The steps required are:
Go to Office.com. Click on the 9 dots Icon on the Top Left Select Power Apps (it can also be found under All Apps) Go to Flows. Select New flow and pick the Instant cloud flow option. Select the flow properties: Name: Excel2SAPGateway Trigger: Manually trigger a flow Click Create On the newly created flow, click on the New Step button to add a new step.</description></item><item><title>Building the LogicApp</title><link>/labs/iot/iot/step2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/iot/iot/step2/</guid><description>Let&amp;rsquo;s build a Logic App to consume the data and decide if this should be sent to SAP or not.
Log on to the Azure Portal and look for Logic Apps Create a new logic app with the following parameters: Resource Group = IoTRG (created on the previous step) Logic App Name = SAPIOTLABXXXX (must be unique on Azure. Replace XXXX with a set of 4 numbers, like SAPIOTLAB1234) Region = East US Click on Review + create Once the logic app is created, go to the Events on the left panel and select Logic Apps The Logic Apps Designer will open with an Azure Event Grid setup.</description></item><item><title>Enhance the App</title><link>/labs/autoint/powerapps/step3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/autoint/powerapps/step3/</guid><description>In this step we will add some filtering functionality to the app and consume data from related Suppliers API based on the selected item.
Adding a Category Filter Click on the + icon, open Input, drag and drop the Drop down component to the canvas, resize it and set the required parameters:
Name = DropProduct Items = Distinct(zProducts,Category) The Items property is the content we want the component to have. In this example we will be selecting unique Category values from the zProduct collection.</description></item><item><title>From HANA Custom Query</title><link>/labs/autoint/powerbi/step3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/autoint/powerbi/step3/</guid><description>In this step we will read data from SAP HANA custom query and cross this information with external data.
The steps required are:
Datasource setup Open Power BI desktop, open a new Report.
Click on the Get Data and select More. Select Database and pick SAP HANA database. Click Connect On the connection parameters set:
Server = vhcals4hcs.dummy.nodomain Port = Custom and 30215 Data connectivity = DirectQuery Open Advanced Options Paste the following query SELECT S.</description></item><item><title>Schedule Automation</title><link>/labs/inframgmt/azureautomation/step5/</link><pubDate>Tue, 15 Mar 2022 15:55:06 -0300</pubDate><guid>/labs/inframgmt/azureautomation/step5/</guid><description>With Azure Automation configured, the VMs tagged, and the Runbooks tested, we can schedule their execution for scheduled automation.
This section will show the steps required for that to be accomplished:
In this example we will show you how to schedule the Stop-SAPSystem runbook. You can follow the same steps for other runbooks and SIDs.
Go to the Azure Automation Account SAPAutomationAcc and select Schedules on the left panel. Click on Add a schedule.</description></item><item><title>Publish to Teams</title><link>/labs/autoint/powerapps/step4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/autoint/powerapps/step4/</guid><description>In this step we will publish the app to Teams. Once the app is saved, it will be a few simple steps to integrate it to all users under your organization.
After the app being Saved, click on the Publish button Another option is to click on the Apps menu, selecting the App, clicking the elippsis and selecting Add to Teams It will ask for a confirmation, Click Add to Teams Go to Teams and select the app on the left menu.</description></item><item><title>Testing the Automation</title><link>/labs/autoint/office365flow/step4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/autoint/office365flow/step4/</guid><description>In this step we will test what we have built.
The steps required are:
After saving the flow (last step on section #3), click on Test on the top right corner Select Manually and click Test Click Continue Finally click on Run flow You will be redirected to the results page. Status should be Your flow is running (this test takes around 15s). You can see the status on each step, and clicking them you can see the details of inputs and outputs of each step.</description></item><item><title>Testing the lab</title><link>/labs/iot/iot/step3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/iot/iot/step3/</guid><description>Let&amp;rsquo;s build a Logic App to consume the data and decide if this should be sent to SAP or not.
Go to the Raspberry Pi Azure IoT Online Simulator and click Run. Once you see a couple of messages with temperature above 29oC, click Stop On the Logic Apps page, go to Overview and check the Runs history for the executions. Each message should have executed the flow once. If you click on the run itself, it will present all the detais of inputs and outputs of every step in the flow.</description></item><item><title>Creating and account</title><link>/env_setup/demogw/step1/</link><pubDate>Mon, 04 Apr 2022 09:17:53 -0300</pubDate><guid>/env_setup/demogw/step1/</guid><description>This section will show how you can create and account in SAP Gateway Demo System and have access to the sample data models.
Go to the Signup page
Authenticate using your SAP credentials Read and Accept the terms and click on Register Wait for the email with user id (SXXXXXXXXXXX) and temporary password. Log on using the temporary credentials to SAP Web GUI and change your password. You should be able to see SAP GUI Web with your credentials.</description></item></channel></rss>